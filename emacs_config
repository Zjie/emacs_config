(setq package-archives '(("gnu" . "http://mirrors.ustc.edu.cn/elpa/gnu/")
                         ("melpa" . "http://mirrors.ustc.edu.cn/elpa/melpa/")
                         ("melpa-stable" . "http://mirrors.ustc.edu.cn/elpa/melpa-stable/")
                         ("org" . "http://mirrors.ustc.edu.cn/elpa/org/")))
(require 'package)

;; Add melpa to your packages repositories
;; (setq package-archives '(("gnu"   . "http://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/")
;;                          ("melpa" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/")))

(package-initialize)

;; Install use-package if not already installed
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(require 'use-package)

(setq-default indent-tabs-mode nil)
(setq-default tab-width 2)
(setq indent-line-function 'insert-tab)
;; (standard-display-ascii ?\t "^I")

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
   '(ccls lsp-treemacs dap-mode company protobuf-mode solarized-theme lsp-java company-lsp yasnippet lsp-ui lsp-metals lsp-mode flycheck sbt-mode scala-mode magit helm helm-core helm-lsp helm-xref go-mode)))

(when (cl-find-if-not #'package-installed-p package-selected-packages)
  (package-refresh-contents)
    (mapc #'package-install package-selected-packages))

;; --------- setting for scala -----------
;; Enable defer and ensure by default for use-package
;; Keep auto-save/backup files separate from source code:  https://github.com/scalameta/metals/issues/1027
(setq use-package-always-defer t
      use-package-always-ensure t
      backup-directory-alist `((".*" . ,temporary-file-directory))
      auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))

;; Enable scala-mode for highlighting, indentation and motion commands
(use-package scala-mode
             :interpreter
             ("scala" . scala-mode))

;; Enable sbt mode for executing sbt commands
(use-package sbt-mode
             :commands sbt-start sbt-command
             :config
             ;; WORKAROUND: https://github.com/ensime/emacs-sbt-mode/issues/31
             ;; allows using SPACE when in the minibuffer
             (substitute-key-definition
              'minibuffer-complete-word
              'self-insert-command
              minibuffer-local-completion-map)
             ;; sbt-supershell kills sbt-mode:  https://github.com/hvesalai/emacs-sbt-mode/issues/152
             (setq sbt:program-options '("-Dsbt.supershell=false"))
             )

;; Enable nice rendering of diagnostics like compile errors.
(use-package flycheck
             :init (global-flycheck-mode))

(use-package lsp-mode
             ;; Optional - enable lsp-mode automatically in scala files
             :hook  (scala-mode . lsp)
             (lsp-mode . lsp-lens-mode)
             :config (setq lsp-prefer-flymake nil))

;; Add metals backend for lsp-mode
(use-package lsp-metals
             :config (setq lsp-metals-treeview-show-when-views-received t))

;; Enable nice rendering of documentation on hover
(use-package lsp-ui
  :after lsp-mode
  :diminish
  :commands lsp-ui-mode
  :custom-face
  (lsp-ui-doc-background ((t (:background nil))))
  (lsp-ui-doc-header ((t (:inherit (font-lock-string-face italic)))))
  :bind
  (:map lsp-ui-mode-map
        ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
        ([remap xref-find-references] . lsp-ui-peek-find-references)
        ("C-c u" . lsp-ui-imenu)
        ("M-i" . lsp-ui-doc-focus-frame))
  (:map lsp-mode-map
        ("M-n" . forward-paragraph)
        ("M-p" . backward-paragraph))
  :custom
  (lsp-ui-doc-header t)                           ;; Whether or not to enable the header which displays the symbol string.
  (lsp-ui-doc-include-signature t)                ;; Whether or not to include the object signature/type in the frame.
  (lsp-ui-doc-border "white")                     ;; Border color of the frame
  (lsp-ui-sideline-enable t)                    ;; Whether or not to enable lsp-ui-sideline
  (lsp-ui-sideline-ignore-duplicate t)            ;; Ignore duplicates when there is a same symbol with same contents
  (lsp-ui-sideline-show-code-actions t)         ;; Whether to show code actions in sideline.
  )

;; lsp-mode supports snippets, but in order for them to work you need to use yasnippet
;; If you don't want to use snippets set lsp-enable-snippet to nil in your lsp-mode settings
;;   to avoid odd behavior with snippets and indentation
(use-package yasnippet)

;; Add company-lsp backend for metals
(use-package company-lsp)

;; Use the Debug Adapter Protocol for running tests and debugging
(use-package posframe
             ;; Posframe is a pop-up tool that must be manually installed for dap-mode
             )

(use-package dap-mode
             :hook
             (lsp-mode . dap-mode)
             (lsp-mode . dap-ui-mode)
             )

(lsp-treemacs-sync-mode 1)

(use-package lsp-java :config (add-hook 'java-mode-hook 'lsp))
(setq lsp-java-jdt-download-url  "https://download.eclipse.org/jdtls/milestones/0.57.0/jdt-language-server-0.57.0-202006172108.tar.gz")
(use-package dap-java :ensure nil)

;; ----------------------

;; key-binding
(global-set-key (kbd "C-c d") #'lsp-find-definition)
(global-set-key (kbd "C-c f") #'lsp-find-references)
(global-set-key (kbd "C-c <") #'previous-buffer)
(global-set-key (kbd "C-c >") #'next-buffer)
  
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

;; turn on highlight matching brackets when cursor is on one
(show-paren-mode 1)

;; ----------- setting for c++ --------------------
(use-package ccls
    :hook ((c-mode c++-mode objc-mode cuda-mode) .
           (lambda () (require 'ccls) (lsp))))
(setq ccls-executable "/data/zhoujie/ccls/Release/ccls")

;; ----------- setting for go --------
(autoload 'go-mode "go-mode" nil t)
(add-to-list 'auto-mode-alist '("\\.go\\'" . go-mode))
(add-hook 'go-mode-hook 'lsp-deferred)
;; -------------------------------

;; other setting
(require 'helm)
(global-set-key (kbd "M-x") #'helm-M-x)
(global-set-key (kbd "C-x r b") #'helm-filtered-bookmarks)
(global-set-key (kbd "C-x C-f") #'helm-find-files)
(helm-mode 1)

(desktop-save-mode 1)
(treemacs)
